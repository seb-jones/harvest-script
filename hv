#!/bin/bash

export today=$(date -Idate)
export api_base_url='https://api.harvestapp.com/api/v2'

function main () {
    entry_id=$(get_first_timesheet_entry_id_matching_input "$@")

    if [[ -n "$entry_id" ]]; then
        restart_timesheet_entry "$entry_id" | output_error_or_updated_timesheet_entry
    else
        create_timesheet_entry "$@" | output_error_or_updated_timesheet_entry
    fi
}

function output_error_or_updated_timesheet_entry() {
    jq --raw-output '.message // {
        client: .client.name,
        project: .project.name,
        task: .task.name,
        notes: .notes,
        hours: .hours
    }'
}

# parameters: $1 = project id, $2 = $task id, $3 = notes
function get_first_timesheet_entry_id_matching_input() {
    harvest_api_request \
        "$api_base_url/time_entries?user_id=$HARVEST_USER_ID&from=$today&to=$today" | \
        jq --raw-output \
            ".time_entries[] | select(
                .project.id == $1 and .task.id == $2 and .notes == \"$3\"
            ) | .id"
}

# parameters: $1 = entry id
function restart_timesheet_entry() {
    harvest_api_request -X PATCH "$api_base_url/time_entries/$1/restart"
}

# parameters: $1 = project id, $2 = $task id, $3 = notes
function create_timesheet_entry() {
    data=$(cat <<-JSON
        {
            "user_id": $HARVEST_USER_ID,
            "project_id": $1,
            "task_id": $2,
            "spent_date": "$today",
            "hours": 0,
            "notes": "$3"
        }
JSON
    )

    harvest_api_request -X POST \
        -H "Content-Type: application/json" \
        -d "$data" \
        "$api_base_url/time_entries"
}

function harvest_api_request() {
    curl --no-progress-meter \
         -H "Harvest-Account-ID: $HARVEST_ACCOUNT_ID" \
         -H "Authorization: Bearer $HARVEST_API_TOKEN" \
         -H "User-Agent: Seb's Harvest Script" \
         "$@"
}

main "$@"
